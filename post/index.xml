<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kglabo.com</title>
    <link>https://kglabo.com/post/</link>
    <description>Recent content in Posts on kglabo.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 18 Feb 2017 00:37:13 +0900</lastBuildDate>
    <atom:link href="https://kglabo.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TIL - ReactStudy#01</title>
      <link>https://kglabo.com/post/react-study-01/</link>
      <pubDate>Sat, 18 Feb 2017 00:37:13 +0900</pubDate>
      
      <guid>https://kglabo.com/post/react-study-01/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;を参考にしての学習。&lt;/p&gt;

&lt;h2 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/learn-raw-react-no-jsx-flux-es6-webpack/&#34;&gt;生のReactを知ろう – JSX、Flux、ES6、Webpackを使わず…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学習内容&#34;&gt;学習内容&lt;/h2&gt;

&lt;p&gt;以下、&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;より引用（個人用メモ）&lt;/p&gt;

&lt;h3 id=&#34;前置き&#34;&gt;前置き&lt;/h3&gt;

&lt;p&gt;Reactでコーディングする先は、&lt;strong&gt;ES2015(ES6)&lt;/strong&gt;を使うと便利になる。&lt;br /&gt;
んで、ES2015を利用する際は&lt;strong&gt;トランスパイル&lt;/strong&gt;が必要。&lt;br /&gt;
後々、&lt;strong&gt;JSX&lt;/strong&gt; を使うし相対的にES2015の敷居下がるよね？ 覚えよ？って記載されてた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ES2015(ES6)&lt;/strong&gt; - &lt;a href=&#34;http://qiita.com/tuno-tky/items/74ca595a9232bcbcd727&#34;&gt;コチラ&lt;/a&gt;によると、&lt;em&gt;ECMAScript6thEdition&lt;/em&gt; == &lt;em&gt;ES6&lt;/em&gt; の事。

&lt;ul&gt;
&lt;li&gt;当初は ES6の名前で発表されたらしいが、正式名称が*ECMAScript2015*になった事もあり、ES2015と呼ばれているとの事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;トランスパイル&lt;/strong&gt; - ソースコードからソースコードへのコンパイル&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSX&lt;/strong&gt; - &lt;a href=&#34;http://qiita.com/ConquestArrow/items/29fc478f48862a4d14fb&#34;&gt;コチラ&lt;/a&gt;によると、ReactのJXSとAltJSのJSXとAdobeJSXがあるらしい

&lt;ul&gt;
&lt;li&gt;つまりどういうことだってばよ？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;es2015について&#34;&gt;ES2015について&lt;/h3&gt;

&lt;p&gt;ES2015でよく使う文法についての解説されていた。&lt;/p&gt;

&lt;h4 id=&#34;const-let&#34;&gt;const/let&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; - 再代入しない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; - 再代入できる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const x = 1;
let y = 2;
y = 3;

const z = { a: 4, b: 5 };
z.a = 6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt;は消えた模様。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;object-shorthand&#34;&gt;object shorthand&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクトのプロパティ名と値の変数名が同じ場合、省略記法を使える&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const foo = &#39;abc&#39;;
const bar = { foo }; // same as { foo: foo }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;destructuring-object&#34;&gt;destructuring object&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;destructuring assignment&lt;/em&gt; という簡便な記法が利用できる&lt;br /&gt;
特にオブジェクトについての記法を紹介されていた。&lt;br /&gt;
変数への代入だけでなく、関数のパラメータ宣言でも用いられるとの事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const obj = { first: &#39;Ebisu&#39;, last: &#39;JS&#39; };
const { first, last } = obj;
// first === &#39;Ebisu&#39;, last === &#39;JS&#39;

function printName({ first, last }) { console.log(first, last); }
printName(obj);

// same as
// function printName(name) { console.log(name.first, name.last); }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;アロー関数&#34;&gt;アロー関数&lt;/h4&gt;

&lt;p&gt;アロー関数
&lt;code&gt;() =&amp;gt; ...&lt;/code&gt; って言う記法。詳しくは&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions&#34;&gt;こちら&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;this&lt;/code&gt;を一旦置いとくと、アロー関数は通常の関数の省力記法と考える事ができるとの事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f1 = function(x) { console.log(x); };
const f2 = (x) =&amp;gt; { console.log(x); };
// f1 and f2 is almost the same
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;return&lt;/code&gt; 文が一つだけの場合は、文そのものを省略できる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f3 = (x) =&amp;gt; { return (x + 1); };
const f4 = (x) =&amp;gt; (x + 1);
// f3 and f4 is the same
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カッコの省略も可能（任意）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f5 = x =&amp;gt; x + 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Coffee Script&lt;/code&gt;で言うと、 &lt;code&gt;hoge = -&amp;gt;&lt;/code&gt;みたいなもん？&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;関数型のコーディングについて&#34;&gt;関数型のコーディングについて&lt;/h3&gt;

&lt;p&gt;Reactでコンポーネントを書く際には、&lt;strong&gt;関数型コーディング&lt;/strong&gt; の方が楽らしい。&lt;br /&gt;
その前提を前置きした上で、このプログラム中によく使う文法について説明されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;関数型コーディング&lt;/strong&gt;  - &lt;a href=&#34;http://qiita.com/stkdev/items/5c021d4e5d54d56b927c&#34;&gt;関数型プログラミングはまず考え方から理解しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pure-function&#34;&gt;pure function&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一般的に副作用がない関数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const pureFunc = (x) =&amp;gt; { let y = x + 1; return y; };

let y;
const notPure = (x) =&amp;gt; { y = x + 1; return y; };

const notPure2 = (x) =&amp;gt; { console.log(&#39;foo&#39;); return x + 1; };
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;logical-operators&#34;&gt;logical operators&lt;/h4&gt;

&lt;p&gt;論理演算子には &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; , &lt;code&gt;||&lt;/code&gt; , &lt;code&gt;!&lt;/code&gt; の3つがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x &amp;amp;&amp;amp; y&lt;/code&gt; は、xが &lt;strong&gt;falsy&lt;/strong&gt; の場合はx、違う場合はyになる

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;falsy&lt;/strong&gt;とは、 &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;&#39;&#39;&lt;/code&gt; などの値。詳しくは&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Glossary/Falsy&#34;&gt;こちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x || y&lt;/code&gt; という表現は、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;falsy&lt;/code&gt; の場合は &lt;code&gt;y&lt;/code&gt; 、違う場合は &lt;code&gt;x&lt;/code&gt; になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!x&lt;/code&gt; という表現は、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;falsy&lt;/code&gt; の場合は &lt;code&gt;true&lt;/code&gt; 、違う場合は &lt;code&gt;false&lt;/code&gt; になる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; は真偽値(boolean)でなくてもよいです&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;0 &amp;amp;&amp;amp; 1
// 0

1 &amp;amp;&amp;amp; 2
// 2

0 || 1
// 1

1 || 2
// 1

!0
// true

!1
// false
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;ternary-operator&#34;&gt;ternary operator&lt;/h4&gt;

&lt;p&gt;三項演算子はよく使うとの事&lt;br /&gt;
&lt;code&gt;x ? y : z&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; がfalsyの場合はzであり、そうでない場合はyになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 ? 1 : 2
// 2

3 ? 4 : 5
// 4
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;filter&#34;&gt;filter&lt;/h4&gt;

&lt;p&gt;Array.filterは配列から部分配列を作る関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引数で与えたテスト関数がtruthy(つまりfalsyでない)を返す要素の配列を返す。&lt;br /&gt;
配列は新しく作られますが、要素はコピーされない。&lt;br /&gt;
テスト関数にはアロー関数を使うと簡便に書くことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].filter((x) =&amp;gt; (x &amp;gt; 2))
// [3, 4]

[&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abcd&#39;].filter((x) =&amp;gt; (x.length &amp;lt;= 2))
// [&#39;a&#39;, &#39;ab&#39;]

[0, 1, 2, &#39;&#39;, &#39;a&#39;, false, true].filter((x) =&amp;gt; (x));
// [1, 2, &#39;a&#39;, true]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;map&#34;&gt;map&lt;/h4&gt;

&lt;p&gt;Array.mapは配列から要素ごとに変換して新しい配列を作る関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引数で与えられた変換関数で返される値を要素にもつ配列を返します。&lt;br /&gt;
配列は新しく作られる。要素数は変化しない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].map((x) =&amp;gt; (x * 2))
// [2, 4, 6, 8]

[&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abcd&#39;].map((x) =&amp;gt; (x.length))
// [1, 2, 3, 4]

[1, 2, &#39;a&#39;, &#39;b&#39;].map((x) =&amp;gt; (&#39;あ&#39; + x))
// [&#39;あ1&#39;, &#39;あ2&#39;, &#39;あa&#39;, &#39;あb&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>kanazawa.rb meetup #54 に参加してきた。</title>
      <link>https://kglabo.com/post/event-kzrb54/</link>
      <pubDate>Sat, 18 Feb 2017 00:37:13 +0900</pubDate>
      
      <guid>https://kglabo.com/post/event-kzrb54/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;今回は、&lt;a href=&#34;http://mokumokukai.tumblr.com/&#34;&gt;もくもく会&lt;/a&gt;に参加。&lt;br /&gt;
会社でTLからから教えてもらった&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;を参考にしながら、&lt;br /&gt;
趣味の範疇で学習を行った。(ド素人レベル)&lt;/p&gt;

&lt;h2 id=&#34;詳細&#34;&gt;詳細&lt;/h2&gt;

&lt;p&gt;もくもくした内容は、別記事の&lt;a href=&#34;https://kglabo.com/post/react-study-01/&#34;&gt;TIL - ReactStudy#01&lt;/a&gt;に記載。&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;環境構築を行ってES2015と関数型のコーディングについて調べているとタイムオーバーとなった。&lt;/p&gt;

&lt;p&gt;なんだか、最近めっきりコーディング自体から離れていた事もあり、&lt;br /&gt;
名前だけはよく聞くReact自体を触れる前に、事前に学ぶ必要がある知識が結構ある事が分かったので、&lt;br /&gt;
時間を作って継続的に触っていく必要があるなーと改めて気付かされる機会になって良かった。&lt;/p&gt;

&lt;p&gt;今、&lt;a href=&#34;http://amzn.asia/eTCvzB0&#34;&gt;アジャイルな見積りと計画づくり&lt;/a&gt;を読んでる途中だけども、&lt;br /&gt;
途中で積み本になってる、リーダブルコードを先に読んだ方がいい気がしてきた:-(&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;その他&#34;&gt;その他&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/Yukimitsu_Izawa&#34;&gt;@Yukimitsu_Izawa&lt;/a&gt;さんが金沢ITフェスティバルで &lt;em&gt;情報セキュリティ&lt;/em&gt; についてお話するとの事&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://kglabo.com/images/2017/02/kzrb-54-01.jpg&#34; alt=&#34;kanazawa.rb meetup #54 に参加してきた。 images/2017/02/kzrb-54-01.jpg&#34; width=500 height=500 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;新しいITビジネスプラザ4Fのサロンスペースにて開催されるとの事で、&lt;br /&gt;
キレイでイカしたサロンスペースで、色々な企業の方々が各々の分野の話をされるとの事。&lt;br /&gt;
無料だし、サロン綺麗だしスケジュールが合えば行きたい。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;二次会&#34;&gt;二次会&lt;/h3&gt;

&lt;p&gt;二次会で途中で金沢大学大野博士が乱入。&lt;br /&gt;
貴重な &lt;em&gt;ルビジウム原子時計(左の物体)&lt;/em&gt; なるものを見せてもらった。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;居酒屋メニューの上に乗る原子時計&lt;/strong&gt; これはなかなか見れる絵面ではない…。&lt;/p&gt;

&lt;figure&gt;
  &lt;amp-img src=&#34;https://kglabo.com/images/2017/02/kzrb-54-02.jpg&#34; alt=&#34;kanazawa.rb meetup #54 に参加してきた。 images/2017/02/kzrb-54-02.jpg&#34; width=500 height=500 layout=&#34;responsive&#34;&gt;&lt;/amp-img&gt;
  
&lt;/figure&gt;


&lt;p&gt;LTEの基地局や、電柱に埋まってるらしく、このサイズで15万ほどするらしい。やばい。&lt;br /&gt;
自分の中で &lt;em&gt;時計&lt;/em&gt; というモノの概念が変化した貴重な経験 :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;イベントレポートはこちら&#34;&gt;イベントレポートはこちら&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://kzrb.org/meetup/54/report.html&#34;&gt;meetup #54 report&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>社内でビアバッシュイベントを開催＆LTしてきた。</title>
      <link>https://kglabo.com/post/dmm-minimi-beerbash03/</link>
      <pubDate>Mon, 06 Feb 2017 00:14:24 +0900</pubDate>
      
      <guid>https://kglabo.com/post/dmm-minimi-beerbash03/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;2017/02/03（金）に「南町ビアバッシュ」という名で社内ビアバッシュイベントを開催してきました。&lt;br /&gt;
とりあえず業務に役立ちそうな内容ならなんでもOKという名目で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;登壇者のプレゼン力向上&lt;/li&gt;
&lt;li&gt;勉強会参加への敷居低下&lt;/li&gt;
&lt;li&gt;参加者ごとの職域範囲外の知識取得&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を目的としてやってます :-)&lt;br /&gt;
(追々は社外の勉強会でも気軽にLTして欲しい)&lt;/p&gt;

&lt;p&gt;今回は3回目の開催となるんですが、LT登壇者ナンパのかいもあって、&lt;br /&gt;
12名ほどの方に様々なLTをして頂く事が出来ました！&lt;/p&gt;

&lt;h2 id=&#34;発表した内容はこちら&#34;&gt;発表した内容はこちら&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/yu_kgr/za-namatomewosaitohua-sitarayi-nili-tisoututehua&#34;&gt;雑なまとめをサイト化したら役に立ちそうって話&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;5分LTで上記の内容を発表したけど、運営準備と資料作成+業務が丁度忙しかったせいで、&lt;br /&gt;
完成したブツは5分どころではなく10分モノだった＼(^o^)／&lt;/p&gt;

&lt;p&gt;今度はもうちょっとライトにした内容の5分版と、&lt;br /&gt;
デモありの10分版を用意しようかなーと思いました　まる。&lt;/p&gt;

&lt;p&gt;今回、tilリポジトリについて紹介するLTもあって、&lt;br /&gt;
前から名前ぐらいは知ってたんだけど、&lt;br /&gt;
改めてどういう使い方をすればよいのかわかって良かった。&lt;/p&gt;

&lt;p&gt;あとは管理職の方々も発表してくれたので、チームビルディング系のLTも聞けて非常に勉強になった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;タックマンモデル

&lt;ul&gt;
&lt;li&gt;チームがどういう状態があり、どういう事をするべきか。という内容であったり、&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;チームのメンバーの知識がどういった時には、&lt;br /&gt;
どういった事をしてあければよいか？というのをフロー図で説明した内容など…。&lt;/p&gt;

&lt;p&gt;ついでにKeynoteの設定いじってたら、Keynote syncとか言う機能があるのを発見して、&lt;br /&gt;
Keynote上で作成したURLを知らせれば、そこにアクセスすればリアルタイムにプレゼンできる。&lt;br /&gt;
みたいな機能っぽいので、次回のビアバッシュで場所にとらわれず東京のメンバーからも、&lt;br /&gt;
それを利用して遠隔でLTしたりできないかなーとか思った。&lt;/p&gt;

&lt;h3 id=&#34;反省点&#34;&gt;反省点&lt;/h3&gt;

&lt;h4 id=&#34;運営するとき&#34;&gt;運営するとき&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;大体、みんな遅れる&lt;/li&gt;
&lt;li&gt;開始直前にPCがフリーズして開始時間が遅れる

&lt;ul&gt;
&lt;li&gt;結果として休憩時間を省く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;以外とピザとビールが一瞬でなくなる

&lt;ul&gt;
&lt;li&gt;買い足しすると参加費を超える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ltするとき&#34;&gt;LTするとき&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;デモ中に自分のサイトERRORで落とす→治らない

&lt;ul&gt;
&lt;li&gt;LTでデモする時はデモも事前に検証する&lt;/li&gt;
&lt;li&gt;ある意味、新しいLTのネタ出来た&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;気になったもの&#34;&gt;気になったもの&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;チームビルディングの理論の一つ&lt;a href=&#34;http://heart-quake.com/article.php?p=396&#34;&gt;タックマンモデル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.asia/eWFfIhb&#34;&gt;パフォーマンス・マネジメント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また来月あたり開催します :-)&lt;/p&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;来週末誕生日なのでプレゼントお待ちしております&#34;&gt;来週末誕生日なのでプレゼントお待ちしております！&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://amzn.asia/4ck0SJL&#34;&gt;yu-kgrは欲しがってる&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>kanazawa.rb meetup #52 に参加してきた。</title>
      <link>https://kglabo.com/post/event-kzrb52/</link>
      <pubDate>Sun, 18 Dec 2016 00:37:13 +0900</pubDate>
      
      <guid>https://kglabo.com/post/event-kzrb52/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;2016/12/17（土）に開催された、kanazawa.rb meetup #52で、&lt;br /&gt;
全員参加のLT大会があったので、とりあえず一年間やった事の振り返りを兼ねて、&lt;br /&gt;
皆さんに全部ぶちまけて、あわよくば相談してこよう！っていう思いつきでLTしてきました。&lt;/p&gt;

&lt;h2 id=&#34;発表した内容はこちら&#34;&gt;発表した内容はこちら&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/yu_kgr/1nian-jian-an-woshi-beruyao-guai-tositeganbatutahua&#34;&gt;1年間、闇を食べる妖怪としてがんばった話&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;LT一回だけにとどまらず、2回、3回とLTしてる人いたりして、しまいには今2個目のLT作りました！&lt;br /&gt;
みたいな方もいたので、なかなか祭り感が半端なかったです。(楽しい)&lt;br /&gt;
なぜかおいしい燻製の作り方のLTやら、今年買ってよかったものベスト10等のLTも聞けたりして、&lt;br /&gt;
一体、僕はどこに迷い込んだんだろう感があったりもしたけども、楽しかったです。&lt;/p&gt;

&lt;h4 id=&#34;イベントレポートはこちら&#34;&gt;イベントレポートはこちら&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://kzrb.org/meetup/52/report.html&#34;&gt;meetup #52 report&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;独り言&#34;&gt;独り言&lt;/h5&gt;

&lt;p&gt;LTネタ、ストックしといてこういう時に「じゃあ時間が余ってることですし、2つ目を…」&lt;br /&gt;
みたいなアクションはなかなかありだなぁ。勉強になりました。&lt;br /&gt;
また、次回参加します :-D&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>16/01/16_WDF研修「半歩先のSEOで効率よく結果を出す」にLT登壇&#43;参加させて頂きました。</title>
      <link>https://kglabo.com/post/wdf-training-seo/</link>
      <pubDate>Sat, 16 Jan 2016 01:30:40 +0900</pubDate>
      
      <guid>https://kglabo.com/post/wdf-training-seo/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;HTML / CSS / JavaScriptが関係しそうな文書構造についてのLTをさせて頂いたのですが、&lt;br /&gt;
実務でコードを書かれてる方が5名ほどしかいないという、中々Awayな状況にてお話させて頂きました。&lt;br /&gt;
とりあえずクローラーの動きだけでも伝われば満足です…！&lt;/p&gt;

&lt;h2 id=&#34;発表した内容はこちら&#34;&gt;発表した内容はこちら&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/yu_kgr/seotojava-script-wen-shu-gou-zao-totimuto-shi-an&#34;&gt;SEOとJava Script。 〜文書構造とチームと、時々、闇〜&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;内容&#34;&gt;内容&lt;/h2&gt;

&lt;h3 id=&#34;各種検索クエリについての説明&#34;&gt;各種検索クエリについての説明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;インフォメーションナルクエリ (調べ物を検索する用途) … 全体の85%〜&lt;/strong&gt;&lt;br /&gt;
気になった事を調べる用途。検索上位に出なくよく、必要に駆られて調べる内容が多い。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;トランザクションクエリ (商品を購入する為の用途) … 全体の10%程度&lt;/strong&gt;&lt;br /&gt;
主に「この商品を買おう」と決めて「商品名」などを入れて検索する。買う前提で検索してるので、&lt;br /&gt;
見込み客に対して露出する機会を増やすために、リスティング・バナー広告で狙う。&lt;br /&gt;
そもそも、ユーザ自身がAmazonや楽天でしか検索していない場合はGoogleに対する必要があるかどうか。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ナビゲーショナルクエリ(既に知っている所にアクセスする用途) &amp;hellip; 全体の5%程度&lt;/strong&gt;&lt;br /&gt;
知っているサイトに対して行こうとしてアクセスする場合「DMM.com」「DMM FX」など&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;用語について-住さんの用語&#34;&gt;用語について ( 住さんの用語 )&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;コンテンツ&lt;/strong&gt;&lt;br /&gt;
教養または娯楽に属する著作物。お役たち情報、読み物。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;セリング&lt;/strong&gt;&lt;br /&gt;
売り込みの為の情報。LP、商品ページ、購入ガイドなど(楽天など)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;データ&lt;/strong&gt;&lt;br /&gt;
創作物(著作物ではない)。単なる情報。会社情報など&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;インデックス&lt;/strong&gt;&lt;br /&gt;
目次・カテゴリなど&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;購買行動の段階&#34;&gt;購買行動の段階&lt;/h3&gt;

&lt;p&gt;カスタマージャーニーとかの奴をわかりやすい言葉にすると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そのうち客　(必要も興味もない)&lt;/li&gt;
&lt;li&gt;おなやみ客　(解決策はなんだろう)&lt;/li&gt;
&lt;li&gt;いますぐ客　(どこで何かを買おう)&lt;/li&gt;
&lt;li&gt;いちげん客　(また買うべきかな？)&lt;/li&gt;
&lt;li&gt;おとくい客　(友達にも進めよう！)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;毛髪が薄い方で例えると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;そのうち客 → 自身の毛髪の薄さに気づいてない客&lt;/li&gt;
&lt;li&gt;おなやみ客 → 自身の毛髪のヤバさに気づいた客&lt;/li&gt;
&lt;li&gt;いますぐ客 → 育毛剤を買おう。と決めた客&lt;/li&gt;
&lt;li&gt;いちげん客 → 二ヶ月使ってみたけど、効果があるから買おう。という客&lt;/li&gt;
&lt;li&gt;おとくい客 → 効果があるから、他にも進めよう。という客&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;いますぐ客から、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;「育毛剤の種類が微妙だったな…」となった場合は、おなやみ客に戻る。&lt;/li&gt;
&lt;li&gt;「そもそも育毛剤じゃなくてズラや！」となった場合は、そのうち客に戻って別の方法を調べる。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;対象となるユーザーの状態によって、検索する内容が変動する。&lt;/p&gt;

&lt;h3 id=&#34;ユーザーの段階毎で考えられる対応&#34;&gt;ユーザーの段階毎で考えられる対応&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;そのうち客　(必要も興味もない) → Facebook広告&lt;/li&gt;
&lt;li&gt;おなやみ客　(解決策はなんだろう) → SEO&lt;/li&gt;
&lt;li&gt;いますぐ客　(どこで何かを買おう) → PPC・モール&lt;/li&gt;
&lt;li&gt;いちげん客　(また買うべきかな？) → CRM&lt;/li&gt;
&lt;li&gt;おとくい客　(友達にも進めよう！) → ソーシャル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;訪問者は自分自身の事柄に関してしか、興味はない。&lt;/p&gt;

&lt;h3 id=&#34;なぜ昨今-seo-seo-と言われるようになったか&#34;&gt;なぜ昨今、SEO！SEO！と言われるようになったか&lt;/h3&gt;

&lt;p&gt;今までは、いますぐ客に対してのSEO対応だけで良かったが、&lt;br /&gt;
業界によっては同業他社によって情報が溢れかえりすぎた場合、&lt;br /&gt;
更なるのびしろを求めて「おなやみ客」の層までを視野にいれるようになった。&lt;/p&gt;

&lt;p&gt;逆に競合他社がいない独自の商品を提供している場合は、
SEOに対する優先度は高くない。&lt;/p&gt;

&lt;h3 id=&#34;seoに向いている商材とは&#34;&gt;SEOに向いている商材とは&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;購入を決めるまで時間が掛かるもの

&lt;ul&gt;
&lt;li&gt;不動産や進学先など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;買い手に知識を要求するもの

&lt;ul&gt;
&lt;li&gt;趣味のものや、専門性の高いもの&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そういったものにHITしない情報&lt;br /&gt;
( 水道が今！壊れているなどの場合は、リスティング等の方が良い )&lt;/p&gt;

&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;改めてこんな事を思いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ユーザの状態によって、必要になる検索ワードが変わる。&lt;/li&gt;
&lt;li&gt;そもそもSEOが必要のない業界・商材もあるので、SEO対応が必要かどうか考える&lt;/li&gt;
&lt;li&gt;SEOが必要であれば使い、SEOが向いてない所には費用対効果が悪いので別の方法を考える。&lt;/li&gt;
&lt;li&gt;やはり検索するユーザーのニーズを満たすコンテンツ作りと機会損失を防ぐ為の制作物の作り方が大事。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>