<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Til on kglabo.com</title>
    <link>https://kglabo.com/tags/til/</link>
    <description>Recent content in Til on kglabo.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 21 Feb 2017 19:43:25 +0900</lastBuildDate>
    <atom:link href="https://kglabo.com/tags/til/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TIL - プロジェクトマネジメント研修 ~WBSについて~</title>
      <link>https://kglabo.com/post/project-management-study-02/</link>
      <pubDate>Tue, 21 Feb 2017 19:43:25 +0900</pubDate>
      
      <guid>https://kglabo.com/post/project-management-study-02/</guid>
      <description>

&lt;h2 id=&#34;なにこれ&#34;&gt;なにこれ？&lt;/h2&gt;

&lt;p&gt;社内で、 &lt;em&gt;プロジェクトマネジメント研修 ~WBS編~&lt;/em&gt; に参加してきた為、&lt;br /&gt;
そちらの内容に関してのメモと、個人的に学習した内容を合わせた備忘録。&lt;/p&gt;

&lt;h2 id=&#34;wbsとは&#34;&gt;WBSとは&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Work Breakdown Structure&lt;/em&gt; の略で、&lt;br /&gt;
プロジェクトマネジメントで計画を立てる際に用いられる手法の一つ。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;自転車の開発&lt;/em&gt; で例えると&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デザイン&lt;/li&gt;
&lt;li&gt;車体作成

&lt;ul&gt;
&lt;li&gt;フレーム

&lt;ul&gt;
&lt;li&gt;部品制作&lt;/li&gt;
&lt;li&gt;組み立て&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サドル

&lt;ul&gt;
&lt;li&gt;部品制作&lt;/li&gt;
&lt;li&gt;組み立て&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ペダルとギア

&lt;ul&gt;
&lt;li&gt;部品制作&lt;/li&gt;
&lt;li&gt;組み立て&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ハンドル

&lt;ul&gt;
&lt;li&gt;部品制作&lt;/li&gt;
&lt;li&gt;組み立て&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のように作業に必要な工程を&lt;em&gt;要素分解&lt;/em&gt; する事で、&lt;br /&gt;
&lt;strong&gt;プロジェクト全体で必要な作業を把握出来るようにする手法&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;このように要素分解を行う事で、&lt;br /&gt;
各作業に必要な人員の確保・リソースの計算を行う事ができるようになる為、&lt;br /&gt;
&lt;em&gt;責任分担が明確化される&lt;/em&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;wbs作成時のポイント&#34;&gt;WBS作成時のポイント&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;作業内容がもれなく記載されている事&lt;/li&gt;
&lt;li&gt;作業単位が適正に分解されて、分かりやすくなっている事&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分割する際の軸&#34;&gt;分割する際の軸&lt;/h3&gt;

&lt;p&gt;WEBプロジェクトで主に使いそうなものは以下の3種類が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;成果物&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;時系列&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;場所(担当)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;成果物-を軸とした場合&#34;&gt;&lt;em&gt;成果物&lt;/em&gt; を軸とした場合&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;仕様&lt;/li&gt;
&lt;li&gt;デザイン&lt;/li&gt;
&lt;li&gt;システム&lt;/li&gt;
&lt;li&gt;プロジェクトマネジメント&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;時系列-を軸とした場合の例&#34;&gt;&lt;em&gt;時系列&lt;/em&gt; を軸とした場合の例&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;要件定義&lt;/li&gt;
&lt;li&gt;設計フェーズ&lt;/li&gt;
&lt;li&gt;実装フェーズ&lt;/li&gt;
&lt;li&gt;検収フェーズ&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;場所-担当-を軸とした場合の例&#34;&gt;&lt;em&gt;場所(担当)&lt;/em&gt; を軸とした場合の例&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;クライアント&lt;/li&gt;
&lt;li&gt;社内&lt;/li&gt;
&lt;li&gt;外注&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;など。&lt;/p&gt;

&lt;h2 id=&#34;wbsの型&#34;&gt;WBSの型&lt;/h2&gt;

&lt;h3 id=&#34;ツリー型構造&#34;&gt;ツリー型構造&lt;/h3&gt;

&lt;h4 id=&#34;メリット&#34;&gt;メリット&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;構造や因果関係が理解し易い&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;デメリット&#34;&gt;デメリット&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;詳細を記述しにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;備考&#34;&gt;備考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;チャート型（Chart form）とも呼ぶ&lt;/li&gt;
&lt;li&gt;大項目を洗い出す時や、初期タスクの洗い出しやすい&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;一覧型構造&#34;&gt;一覧型構造&lt;/h3&gt;

&lt;h4 id=&#34;メリット-1&#34;&gt;メリット&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;詳細が記述し易い&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;デメリット-1&#34;&gt;デメリット&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;構造がわかりにくい&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;備考-1&#34;&gt;備考&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;表型（Tabular form）とも呼ぶ&lt;/li&gt;
&lt;li&gt;ある程度大項目がわかっている場合、責任分担やスケジュールを盛り込みやすい&lt;/li&gt;
&lt;li&gt;WEBプロジェクトでは、こちらが利用されるケースか多い&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;分割された項目&#34;&gt;分割された項目&lt;/h2&gt;

&lt;p&gt;どういった軸で分解するか決めた後、&lt;br /&gt;
更に細分化して項目を分解していく必要がある。&lt;/p&gt;

&lt;h3 id=&#34;レベル毎の分解&#34;&gt;レベル毎の分解&lt;/h3&gt;

&lt;p&gt;分割された項目は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;大項目（1レベル）&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;中項目（2レベル）&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;小項目（3レベル）&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった階層構造で整理していく。&lt;/p&gt;

&lt;h3 id=&#34;各担当の必要な分解レベル&#34;&gt;各担当の必要な分解レベル&lt;/h3&gt;

&lt;p&gt;WBSを閲覧する担当者によって、&lt;em&gt;「分割された項目」&lt;/em&gt; つまり、&lt;br /&gt;
WBSの分解が必要なレベルは異なる。&lt;/p&gt;

&lt;p&gt;オーナーレベル（事業責任者等）であれば、2レベル程度で良いが、&lt;br /&gt;
作業者レベルの場合は、6レベルあたり(作業単位で分解されている方が良い)&lt;/p&gt;

&lt;h3 id=&#34;ワーク-パッケージ&#34;&gt;ワーク・パッケージ&lt;/h3&gt;

&lt;p&gt;尚、最小単位まで分解された作業単位は「&lt;strong&gt;ワーク・パッケージ&lt;/strong&gt;」と呼ばれて、&lt;br /&gt;
PMBOKでは「&lt;strong&gt;最下位レベルの要素成果物&lt;/strong&gt;」と定義されている。&lt;/p&gt;

&lt;p&gt;どこまで分解するかの指標としては、以下のような形が良いとされている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;経験が浅い・新規プロジェクト など&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;不確実性な要素が存在しているケースは、なるべく細かくブレークダウンしたほうが良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;経験がある・スキルが高いメンバーがアサインしている など&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;安定している場合はそこまで細かくブレークダウンしなくても良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ワーク-パッケージの内容が適切かどうか&#34;&gt;ワーク・パッケージの内容が適切かどうか&lt;/h3&gt;

&lt;p&gt;分解されたワーク・パッケージの内容が適切かどうか確認するには、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ひとつのワーク・パッケージに複数の人が担当者に任命されている

&lt;ul&gt;
&lt;li&gt;適切な作業分解ができていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワーク・パッケージ内の &lt;em&gt;各作業間に長い空き時間にある&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;待機工数が発生している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワーク・パッケージ内の &lt;em&gt;作業の一部に特化したリスクがあり、切り分けが必要&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;適切な作業分解ができていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワーク・パッケージの &lt;em&gt;内容を明確に理解していないステークホルダーがいる&lt;/em&gt;

&lt;ul&gt;
&lt;li&gt;追加項目が発生する可能性がある
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などを確認すると良い。&lt;/p&gt;

&lt;h2 id=&#34;作成時の注意点&#34;&gt;作成時の注意点&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;WBSで最重要のものは「チーム全員でレビューをおこなう事」

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不確実性の程度認識&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理の強弱を知る&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;不確実性とは&#34;&gt;不確実性とは&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;時間に制約がある&lt;/li&gt;
&lt;li&gt;特殊なリソース調達が必要&lt;/li&gt;
&lt;li&gt;アウトプット結果が具体的に見えないタスク&lt;/li&gt;
&lt;li&gt;アウトプットの完成度が不透明&lt;/li&gt;
&lt;li&gt;技術麺での新規性が高い&lt;/li&gt;
&lt;li&gt;経験者がいない技術&lt;/li&gt;
&lt;li&gt;前提、仮定が狂いやすい作業&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;管理の強弱とは&#34;&gt;管理の強弱とは&lt;/h3&gt;

&lt;p&gt;内製で行う作業なのか、ベンダーに発注を行う作業なのか？&lt;br /&gt;
ベンター作業との細かい &lt;em&gt;依存関係を明確に認識&lt;/em&gt; しておく為。&lt;/p&gt;

&lt;h3 id=&#34;レビュー時の観点&#34;&gt;レビュー時の観点&lt;/h3&gt;

&lt;p&gt;以下の点に注意して内容を確認する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;要素成果物に抜けがないか&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ブレークダウンは適切か&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;責任は明確化されているか&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wbs更新時のルール策定&#34;&gt;WBS更新時のルール策定&lt;/h2&gt;

&lt;p&gt;メンバーの解釈・裁量で期限設定やチケットの追加等を行われた場合、&lt;br /&gt;
WBSの管理が難しくなりWBSの信用性がなくなる。&lt;br /&gt;
結果として円滑なプロジェクト進行が難しくなる為、以下の点に注意する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;WBSの管理者・更新者をチームで決めてルール化する&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新後の周知ルールを定める&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;備考-2&#34;&gt;備考&lt;/h2&gt;

&lt;p&gt;一般的にはWBSは、&lt;em&gt;4つ程度の1レベルが存在&lt;/em&gt; している程度が適正だと言われている。&lt;/p&gt;

&lt;p&gt;既に利用しているWBSのテンプレートが存在している場合は、&lt;br /&gt;
&lt;em&gt;新たにWBSを作成するプロジェクトがそのフォーマットに適しているのか&lt;/em&gt; を考えて引っ張られないようにする。&lt;/p&gt;

&lt;p&gt;WBSは作成した後、その情報を元として後々の作業で利用される事が多い。&lt;br /&gt;
主にスケジュール管理に使用される事が多いため、&lt;em&gt;各要素にユニークな識別子&lt;/em&gt; を振り分ける事が一般的。&lt;br /&gt;
&lt;em&gt;識別子&lt;/em&gt; は、&lt;em&gt;スケジュール&lt;/em&gt; / &lt;em&gt;予算見積書&lt;/em&gt; など、&lt;em&gt;様々な文書に利用できる&lt;/em&gt; 為、&lt;br /&gt;
識別子が一致していれば会計処理がスムーズにする事も可能。&lt;br /&gt;
コスト削減する場合にも、どの作業を削れば良いかが分かりやすくメリットがある。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TIL - ReactStudy#01</title>
      <link>https://kglabo.com/post/react-study-01/</link>
      <pubDate>Sat, 18 Feb 2017 00:37:13 +0900</pubDate>
      
      <guid>https://kglabo.com/post/react-study-01/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;を参考にしての学習。&lt;/p&gt;

&lt;h2 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/learn-raw-react-no-jsx-flux-es6-webpack/&#34;&gt;生のReactを知ろう – JSX、Flux、ES6、Webpackを使わず…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;学習内容&#34;&gt;学習内容&lt;/h2&gt;

&lt;p&gt;以下、&lt;a href=&#34;http://basic-react.axlight.com/html/&#34;&gt;React基礎&lt;/a&gt;より引用（個人用メモ）&lt;/p&gt;

&lt;h3 id=&#34;前置き&#34;&gt;前置き&lt;/h3&gt;

&lt;p&gt;Reactでコーディングする先は、&lt;strong&gt;ES2015(ES6)&lt;/strong&gt;を使うと便利になる。&lt;br /&gt;
んで、ES2015を利用する際は&lt;strong&gt;トランスパイル&lt;/strong&gt;が必要。&lt;br /&gt;
後々、&lt;strong&gt;JSX&lt;/strong&gt; を使うし相対的にES2015の敷居下がるよね？ 覚えよ？って記載されてた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ES2015(ES6)&lt;/strong&gt; - &lt;a href=&#34;http://qiita.com/tuno-tky/items/74ca595a9232bcbcd727&#34;&gt;コチラ&lt;/a&gt;によると、&lt;em&gt;ECMAScript6thEdition&lt;/em&gt; == &lt;em&gt;ES6&lt;/em&gt; の事。

&lt;ul&gt;
&lt;li&gt;当初は ES6の名前で発表されたらしいが、正式名称が*ECMAScript2015*になった事もあり、ES2015と呼ばれているとの事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;トランスパイル&lt;/strong&gt; - ソースコードからソースコードへのコンパイル&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSX&lt;/strong&gt; - &lt;a href=&#34;http://qiita.com/ConquestArrow/items/29fc478f48862a4d14fb&#34;&gt;コチラ&lt;/a&gt;によると、ReactのJXSとAltJSのJSXとAdobeJSXがあるらしい

&lt;ul&gt;
&lt;li&gt;つまりどういうことだってばよ？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;es2015について&#34;&gt;ES2015について&lt;/h3&gt;

&lt;p&gt;ES2015でよく使う文法についての解説されていた。&lt;/p&gt;

&lt;h4 id=&#34;const-let&#34;&gt;const/let&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; - 再代入しない&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; - 再代入できる&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const x = 1;
let y = 2;
y = 3;

const z = { a: 4, b: 5 };
z.a = 6;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;var&lt;/code&gt;は消えた模様。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;object-shorthand&#34;&gt;object shorthand&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;オブジェクトのプロパティ名と値の変数名が同じ場合、省略記法を使える&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const foo = &#39;abc&#39;;
const bar = { foo }; // same as { foo: foo }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;destructuring-object&#34;&gt;destructuring object&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;destructuring assignment&lt;/em&gt; という簡便な記法が利用できる&lt;br /&gt;
特にオブジェクトについての記法を紹介されていた。&lt;br /&gt;
変数への代入だけでなく、関数のパラメータ宣言でも用いられるとの事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const obj = { first: &#39;Ebisu&#39;, last: &#39;JS&#39; };
const { first, last } = obj;
// first === &#39;Ebisu&#39;, last === &#39;JS&#39;

function printName({ first, last }) { console.log(first, last); }
printName(obj);

// same as
// function printName(name) { console.log(name.first, name.last); }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;アロー関数&#34;&gt;アロー関数&lt;/h4&gt;

&lt;p&gt;アロー関数
&lt;code&gt;() =&amp;gt; ...&lt;/code&gt; って言う記法。詳しくは&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/arrow_functions&#34;&gt;こちら&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;this&lt;/code&gt;を一旦置いとくと、アロー関数は通常の関数の省力記法と考える事ができるとの事。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f1 = function(x) { console.log(x); };
const f2 = (x) =&amp;gt; { console.log(x); };
// f1 and f2 is almost the same
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code&gt;return&lt;/code&gt; 文が一つだけの場合は、文そのものを省略できる&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f3 = (x) =&amp;gt; { return (x + 1); };
const f4 = (x) =&amp;gt; (x + 1);
// f3 and f4 is the same
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カッコの省略も可能（任意）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const f5 = x =&amp;gt; x + 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Coffee Script&lt;/code&gt;で言うと、 &lt;code&gt;hoge = -&amp;gt;&lt;/code&gt;みたいなもん？&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;関数型のコーディングについて&#34;&gt;関数型のコーディングについて&lt;/h3&gt;

&lt;p&gt;Reactでコンポーネントを書く際には、&lt;strong&gt;関数型コーディング&lt;/strong&gt; の方が楽らしい。&lt;br /&gt;
その前提を前置きした上で、このプログラム中によく使う文法について説明されている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;関数型コーディング&lt;/strong&gt;  - &lt;a href=&#34;http://qiita.com/stkdev/items/5c021d4e5d54d56b927c&#34;&gt;関数型プログラミングはまず考え方から理解しよう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;pure-function&#34;&gt;pure function&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;一般的に副作用がない関数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;const pureFunc = (x) =&amp;gt; { let y = x + 1; return y; };

let y;
const notPure = (x) =&amp;gt; { y = x + 1; return y; };

const notPure2 = (x) =&amp;gt; { console.log(&#39;foo&#39;); return x + 1; };
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;logical-operators&#34;&gt;logical operators&lt;/h4&gt;

&lt;p&gt;論理演算子には &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; , &lt;code&gt;||&lt;/code&gt; , &lt;code&gt;!&lt;/code&gt; の3つがある。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x &amp;amp;&amp;amp; y&lt;/code&gt; は、xが &lt;strong&gt;falsy&lt;/strong&gt; の場合はx、違う場合はyになる

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;falsy&lt;/strong&gt;とは、 &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;&#39;&#39;&lt;/code&gt; などの値。詳しくは&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Glossary/Falsy&#34;&gt;こちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x || y&lt;/code&gt; という表現は、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;falsy&lt;/code&gt; の場合は &lt;code&gt;y&lt;/code&gt; 、違う場合は &lt;code&gt;x&lt;/code&gt; になる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!x&lt;/code&gt; という表現は、 &lt;code&gt;x&lt;/code&gt; が &lt;code&gt;falsy&lt;/code&gt; の場合は &lt;code&gt;true&lt;/code&gt; 、違う場合は &lt;code&gt;false&lt;/code&gt; になる

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; は真偽値(boolean)でなくてもよいです&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;0 &amp;amp;&amp;amp; 1
// 0

1 &amp;amp;&amp;amp; 2
// 2

0 || 1
// 1

1 || 2
// 1

!0
// true

!1
// false
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;ternary-operator&#34;&gt;ternary operator&lt;/h4&gt;

&lt;p&gt;三項演算子はよく使うとの事&lt;br /&gt;
&lt;code&gt;x ? y : z&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; がfalsyの場合はzであり、そうでない場合はyになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0 ? 1 : 2
// 2

3 ? 4 : 5
// 4
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;filter&#34;&gt;filter&lt;/h4&gt;

&lt;p&gt;Array.filterは配列から部分配列を作る関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引数で与えたテスト関数がtruthy(つまりfalsyでない)を返す要素の配列を返す。&lt;br /&gt;
配列は新しく作られますが、要素はコピーされない。&lt;br /&gt;
テスト関数にはアロー関数を使うと簡便に書くことができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].filter((x) =&amp;gt; (x &amp;gt; 2))
// [3, 4]

[&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abcd&#39;].filter((x) =&amp;gt; (x.length &amp;lt;= 2))
// [&#39;a&#39;, &#39;ab&#39;]

[0, 1, 2, &#39;&#39;, &#39;a&#39;, false, true].filter((x) =&amp;gt; (x));
// [1, 2, &#39;a&#39;, true]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;map&#34;&gt;map&lt;/h4&gt;

&lt;p&gt;Array.mapは配列から要素ごとに変換して新しい配列を作る関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;引数で与えられた変換関数で返される値を要素にもつ配列を返します。&lt;br /&gt;
配列は新しく作られる。要素数は変化しない。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].map((x) =&amp;gt; (x * 2))
// [2, 4, 6, 8]

[&#39;a&#39;, &#39;ab&#39;, &#39;abc&#39;, &#39;abcd&#39;].map((x) =&amp;gt; (x.length))
// [1, 2, 3, 4]

[1, 2, &#39;a&#39;, &#39;b&#39;].map((x) =&amp;gt; (&#39;あ&#39; + x))
// [&#39;あ1&#39;, &#39;あ2&#39;, &#39;あa&#39;, &#39;あb&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>